- name: Setup OS
  hosts: servers
  tasks:
    - name: Ping
      ansible.builtin.ping:

    - name: Update APT index
      when: ansible_facts['system'] == 'Linux' and ansible_facts['os_family'] == 'Debian'
      become: true
      ansible.builtin.apt:
        update_cache: true

    - name: Install base APT packages
      register: apt_packages
      when: ansible_facts['system'] == 'Linux' and ansible_facts['os_family'] == 'Debian'
      become: true
      ansible.builtin.apt:
        pkg:
          - apache2-utils # Maybe remove this in the future
          - bash
          - build-essential
          - ca-certificates
          - cron
          - curl
          - dnsutils
          - firmware-linux-nonfree
          - git
          - lm-sensors
          - locales
          - lshw
          - moreutils
          - openssl
          - python-is-python3
          - python3
          - rfkill
          - rsync
          - smartmontools
          - wget

    - name: Vacuum journal logs
      register: journactl_vacuum
      when: ansible_facts['system'] == 'Linux' and 'raspberry' in ansible_facts['hostname']
      changed_when: "'Deleted archived journal' in journactl_vacuum.stdout or journactl_vacuum.stdout | regex_search('Vacuuming done, freed [1-9]')"
      ansible.builtin.shell: |
        set -eufo pipefail
        if [ ! -e /var/log/journal ]; then
          exit 0
        fi
        sudo journalctl --vacuum-time=2d --vacuum-size=5M --rotate 2>&1

    - name: Install log2ram
      register: log2ram_install
      when: ansible_facts['system'] == 'Linux' and 'raspberry' in ansible_facts['hostname']
      changed_when: "'CHANGED' in log2ram_install.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        if ! command -v log2ram >/dev/null 2>&1; then
          echo "deb [signed-by=/usr/share/keyrings/azlux-archive-keyring.gpg] http://packages.azlux.fr/debian/ bookworm main" \
            | sudo tee /etc/apt/sources.list.d/azlux.list
          sudo curl https://azlux.fr/repo.gpg -o /usr/share/keyrings/azlux-archive-keyring.gpg
          sudo apt-get update
          sudo apt-get install --yes log2ram
          # Modify settings (disable email)
          sed 's~MAIL=true~MAIL=false~' </etc/log2ram.conf | sudo sponge /etc/log2ram.conf
          printf 'CHANGED\n'
        fi

    - name: Reboot
      when: log2ram_install.changed
      throttle: 1
      ansible.builtin.reboot:
        reboot_command: sudo reboot

    - name: Verify log2ram installation
      when: log2ram_install.changed
      changed_when: "False"
      ansible.builtin.shell: |
        set -eufo pipefail
        systemctl status log2ram | grep 'Active: active' >/dev/null 2>&1

    - name: Configure sensors
      when: apt_packages.changed
      changed_when: "True"
      ansible.builtin.shell: |
        set -eufo pipefail
        (yes || true) | sudo sensors-detect

    - name: Install docker
      register: docker_install
      when: ansible_facts['system'] == 'Linux'
      changed_when: "'CHANGED' in docker_install.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        if ! command -v docker >/dev/null 2>&1; then
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/debian/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) \
            signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/debian \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" \
            | sudo tee /etc/apt/sources.list.d/docker.list >/dev/null
          sudo apt-get update
          sudo apt-get install --yes docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          # sudo groupadd docker # Already exists
          sudo usermod -aG docker "$(whoami)"
          printf 'CHANGED\n'
        fi

    - name: Verify docker installation
      when: docker_install.changed
      changed_when: "False"
      ansible.builtin.shell: |
        set -eufo pipefail
        sudo docker run hello-world

    - name: Reboot
      when: docker_install.changed
      throttle: 1
      ansible.builtin.reboot:
        reboot_command: sudo reboot

    - name: Verify docker installation
      when: docker_install.changed
      changed_when: "False"
      ansible.builtin.shell: |
        set -eufo pipefail
        docker run hello-world

    - name: Start docker on startup
      register: docker_startup
      when: ansible_facts['system'] == 'Linux'
      changed_when: "'CHANGED' in docker_startup.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        if ! sudo systemctl status docker.service >/dev/null 2>&1; then
          sudo systemctl enable docker.service
          printf 'CHANGED\n'
        fi
        if ! sudo systemctl status containerd.service >/dev/null 2>&1; then
          sudo systemctl enable containerd.service
          printf 'CHANGED\n'
        fi

    - name: Docker config
      register: docker_config
      changed_when: "'CHANGED' in docker_config.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        new_config='{
          "log-driver": "local",
          "log-opts": {
            "max-size": "100m"
          },
          "insecure-registries": [
            "10.1.16.7"
          ],
          "registry-mirrors": [
            "https://10.1.16.7"
          ]
        }'
        before_sha="$(shasum '/etc/docker/daemon.json' || true)"
        printf '%s\n' "$new_config" | sudo tee '/etc/docker/daemon.json' >/dev/null
        after_sha="$(shasum '/etc/docker/daemon.json')"
        if [ "$before_sha" != "$after_sha" ]; then
          printf 'CHANGED\n'
        fi

    - name: Setup locale
      register: setup_locale
      when: ansible_facts['system'] == 'Linux'
      changed_when: "'CHANGED' in setup_locale.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        sudo locale-gen en_US.UTF-8
        sudo localedef -i en_US -f UTF-8 en_US.UTF-8
        before_sha="$(shasum '/etc/default/locale')"
        printf 'LANGUAGE=en_US.UTF-8\nLC_ALL=en_US.UTF-8\nLANG=en_US.UTF-8\nLC_CTYPE=en_US.UTF-8\n' | sudo tee '/etc/default/locale' >/dev/null
        after_sha="$(shasum '/etc/default/locale')"
        if [ "$before_sha" != "$after_sha" ]; then
          printf 'CHANGED\n'
        fi

    - name: Reboot
      when: setup_locale.changed
      throttle: 1
      ansible.builtin.reboot:
        reboot_command: sudo reboot

    - name: Create cron log directory
      register: create_cron_log_dir
      changed_when: "'CHANGED' in create_cron_log_dir.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        if [ ! -e "$HOME/.log" ]; then
          mkdir -p "$HOME/.log"
          printf 'CHANGED\n'
        fi

    - name: Git clone homelab
      register: git_clone_homelab
      changed_when: "'CHANGED' in git_clone_homelab.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        if [ ! -e "$HOME/git/homelab" ]; then
          mkdir -p "$HOME/git"
          git clone https://github.com/matejkosiarcik/homelab.git "$HOME/git/homelab"
          printf 'CHANGED\n'
        fi

    - name: Setup current server symlink
      register: git_current_symlink
      changed_when: "'CHANGED' in git_current_symlink.stdout"
      ansible.builtin.shell: |
        set -eufo pipefail
        if [ ! -e "$HOME/git/homelab/servers/.current" ]; then
          cd "$HOME/git/homelab/servers"
          ln -s "$(uname -n)" .current
          printf 'CHANGED\n'
        fi

    - name: Install global server scripts
      register: git_install
      when: git_clone_homelab.changed or git_current_symlink.changed
      changed_when: "True"
      ansible.builtin.shell: |
        set -eufo pipefail
        cd "$HOME/git/homelab/servers/.current"
        sh helper.sh install --prod

    - name: Reboot
      when: git_install.changed
      throttle: 1
      ansible.builtin.reboot:
        reboot_command: sudo reboot
