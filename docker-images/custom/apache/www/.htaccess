# Protect .htaccess and .htpasswd
<FilesMatch "^(?:^.*/)?\.[Hh][Tt]">
    Order allow,deny
    Deny from all
</FilesMatch>

# Turn on redirection
RewriteEngine On
RewriteBase /

# Remove port from _HOST if applicable
RewriteRule ^ - [E=_HOST:%{HTTP_HOST},NE]
RewriteCond %{ENV:_HOST} ^(.*):.*$ [NC]
RewriteRule ^ - [E=_HOST:%1,NE]

# Set _ALLOW_HTTPS depending on current path
RewriteRule ^ - [E=_ALLOW_HTTPS:true,NE]
RewriteCond %{REQUEST_URI} ^/\.well-known/acme-challenge/ [NC]
RewriteRule ^ - [E=_ALLOW_HTTPS:false,NE]

# Set _FORCE_HTTPS depending on current path
RewriteRule ^ - [E=_FORCE_HTTPS:false,NE]
RewriteCond %{REQUEST_URI} ^/\.apache(?:/.*)?$ [NC]
RewriteRule ^ - [E=_FORCE_HTTPS:true,NE]

# Set target protocol
RewriteRule ^ - [E=_PROTOCOL:,NE]
RewriteCond %{ENV:PROXY_REDIRECT_TO_HTTP_OR_HTTPS} ^HTTP$ [NC]
RewriteRule ^ - [E=_PROTOCOL:http,NE]
RewriteCond %{ENV:_FORCE_HTTPS} true [NC]
RewriteRule ^ - [E=_PROTOCOL:https,NE]
RewriteCond %{ENV:PROXY_REDIRECT_TO_HTTP_OR_HTTPS} ^HTTPS$ [NC]
RewriteCond %{ENV:_ALLOW_HTTPS} true [NC]
RewriteRule ^ - [E=_PROTOCOL:https,NE]
RewriteCond %{ENV:_PROTOCOL} ^$ [NC]
RewriteCond %{HTTPS} off [NC]
RewriteRule ^ - [E=_PROTOCOL:http,NE]
RewriteCond %{ENV:_PROTOCOL} ^$ [NC]
RewriteCond %{HTTPS} on [NC]
RewriteRule ^ - [E=_PROTOCOL:https,NE]

# Set target port
RewriteRule ^ - [E=_PORT:,NE]
RewriteCond %{ENV:_PROTOCOL} ^http$ [NC]
RewriteRule ^ - [E=_PORT::%{ENV:PROXY_HTTP_PORT},NE]
RewriteCond %{ENV:_PROTOCOL} ^https$ [NC]
RewriteRule ^ - [E=_PORT::%{ENV:PROXY_HTTPS_PORT},NE]

# Hide default ports
RewriteCond %{ENV:_PROTOCOL} ^http$ [NC]
RewriteCond %{ENV:_PORT} ^:80$ [NC]
RewriteRule ^ - [E=_PORT:,NE]
RewriteCond %{ENV:_PROTOCOL} ^https$ [NC]
RewriteCond %{ENV:_PORT} ^:443$ [NC]
RewriteRule ^ - [E=_PORT:,NE]

# Redirect [internally] all directories without trailing slash
RewriteCond %{REQUEST_URI} ^/\.apache(?:/.*)?$ [NC]
RewriteCond %{HTTPS} on [NC]
RewriteCond %{REQUEST_FILENAME} -d
RewriteCond %{REQUEST_URI} !/$
RewriteRule ^ "%{REQUEST_URI}/" [L]

# Decide if we should apply redirect
RewriteRule ^ - [E=_REDIRECT:false,NE]
RewriteCond %{HTTPS} off [NC]
RewriteCond %{ENV:_PROTOCOL} ^https$ [NC]
RewriteRule ^ - [E=_REDIRECT:true,NE]
RewriteCond %{HTTPS} on [NC]
RewriteCond %{ENV:_PROTOCOL} ^http$ [NC]
RewriteRule ^ - [E=_REDIRECT:true,NE]

# Use 301/302 for GET & HEAD requests and 308/307 for all others (POST, PUT, ...)
# Because 301 and 302 are not guaranteed to keep the original request method when client receives it (so it changes eg. from POST to GET)
# See more info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301 or https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/302
RewriteRule ^ - [E=_REDIRECT_STATUS_SAFE_GET:false,NE]
RewriteCond %{REQUEST_METHOD} ^(GET|HEAD)$ [NC]
RewriteRule ^ - [E=_REDIRECT_STATUS_SAFE_GET:true,NE]

# Perform redirects if applicable (empty path)
RewriteCond %{REQUEST_URI} ^$ [NC,OR]
RewriteCond %{REQUEST_URI} ^/$ [NC]
RewriteCond %{ENV:_REDIRECT} true [NC]
RewriteCond %{ENV:_REDIRECT_STATUS_SAFE_GET} true [NC]
RewriteRule ^ "%{ENV:_PROTOCOL}://%{ENV:_HOST}%{ENV:_PORT}" [L,R=302]
RewriteCond %{REQUEST_URI} ^$ [NC,OR]
RewriteCond %{REQUEST_URI} ^/$ [NC]
RewriteCond %{ENV:_REDIRECT} true [NC]
RewriteCond %{ENV:_REDIRECT_STATUS_SAFE_GET} !true [NC]
RewriteRule ^ "%{ENV:_PROTOCOL}://%{ENV:_HOST}%{ENV:_PORT}" [L,R=307]

# Perform redirects if applicable (not empty path)
RewriteCond %{REQUEST_URI} !^$ [NC]
RewriteCond %{ENV:_REDIRECT} true [NC]
RewriteCond %{ENV:_REDIRECT_STATUS_SAFE_GET} true [NC]
RewriteRule ^ "%{ENV:_PROTOCOL}://%{ENV:_HOST}%{ENV:_PORT}%{REQUEST_URI}" [L,R=302]
RewriteCond %{REQUEST_URI} !^$ [NC]
RewriteCond %{ENV:_REDIRECT} true [NC]
RewriteCond %{ENV:_REDIRECT_STATUS_SAFE_GET} !true [NC]
RewriteRule ^ "%{ENV:_PROTOCOL}://%{ENV:_HOST}%{ENV:_PORT}%{REQUEST_URI}" [L,R=307]

# Remove "Content-Type" header when redirecting from HTTP to HTTPS
# More info: https://github.com/whatwg/fetch/issues/609
# Header always set Content-Type "" "expr=%{HTTPS} =~ m#^off$#"
# Header always unset Content-Type "expr=%{HTTPS} =~ m#^off$#"

# Return index.html for directories
RewriteCond %{ENV:_REDIRECT} false [NC]
RewriteCond %{ENV:PROXY_UPSTREAM_URL} ^$ [NC,OR]
RewriteCond %{REQUEST_URI} ^/\.apache(?:/.*)?$ [NC]
RewriteCond %{REQUEST_FILENAME} -d
RewriteCond %{REQUEST_FILENAME}/index.html -f
RewriteRule ^ "%{REQUEST_URI}/index.html" [L]

# Specific redirect for PiHole: "/" -> "/admin"
RewriteCond %{ENV:HOMELAB_APP_TYPE} pihole [NC]
RewriteCond %{ENV:_REDIRECT_STATUS_SAFE_GET} true [NC]
RewriteCond %{REQUEST_URI} ^/?$
RewriteRule ^ /admin [L,R=302]
RewriteCond %{ENV:HOMELAB_APP_TYPE} pihole [NC]
RewriteCond %{ENV:_REDIRECT_STATUS_SAFE_GET} !true [NC]
RewriteCond %{REQUEST_URI} ^/?$
RewriteRule ^ /admin [L,R=307]

# Custom redirects to prevent 404 root errors
RewriteCond %{ENV:HOMELAB_APP_TYPE} ^(?:certbot|unbound|docker-stats)$ [NC]
RewriteCond %{REQUEST_URI} ^/?$
RewriteRule ^ /.apache/index.html [L]

# Route all invalid unbound requests to 404
RewriteCond %{ENV:HOMELAB_APP_TYPE} unbound [NC]
RewriteCond %{REQUEST_URI} !^/favicon\.(?:ico|png)$ [NC]
RewriteCond %{REQUEST_URI} !^/metrics$ [NC]
RewriteCond %{REQUEST_URI} !^/\.apache(?:/.*)?$ [NC]
RewriteRule ^ /.apache/not-found [L]

# Protect Apache proxy prometheus endpoint
<If "%{HTTPS} == 'on' && %{REQUEST_URI} =~ m#^/\.apache/metrics$#">
    AuthType Basic
    AuthName Protected
    AuthBasicProvider file
    Require valid-user
    <If "%{REQUEST_METHOD} =~ m#^(GET|HEAD|OPTIONS)$#">
        # Allow readonly methods
        AuthUserFile /homelab/users/proxy-prometheus.htpasswd
    </If>
    <Else>
        # Deny non-readonly methods altogether
        AuthUserFile /homelab/users/empty.htpasswd
    </Else>
</If>

# Protect prometheus /metrics endpoint
<If "%{HTTPS} == 'on' && %{ENV:HOMELAB_APP_TYPE} =~ m#^(?:dawarich|docker-stats|glances|gatus|jellyfin|nodeexporter|pihole|samba|unbound)$# && %{REQUEST_URI} =~ m#^/metrics$#">
    AuthType Basic
    AuthName Protected
    AuthBasicProvider file
    Require valid-user
    <If "%{REQUEST_METHOD} =~ m#^(GET|HEAD|OPTIONS)$#">
        # Allow readonly methods
        AuthUserFile /homelab/users/prometheus.htpasswd
    </If>
    <Else>
        # Deny non-readonly methods altogether
        AuthUserFile /homelab/users/empty.htpasswd
    </Else>
</If>

# Protect entire apps
<If "%{HTTPS} == 'on' && %{ENV:HOMELAB_APP_TYPE} =~ m#^(?:certbot|docker-stats|gatus|homepage|kiwix|nodeexporter|ollama|owntracks|renovatebot|unbound)$#">
    <If "%{REQUEST_METHOD} =~ m#^(GET|HEAD|OPTIONS)$# && ( %{REQUEST_URI} =~ m#^/\.apache(?:/.*)?$# || %{REQUEST_URI} =~ m#^/favicon\.(?:ico|png)$# )">
        # Allow requests with readonly methods to safe locations
    </If>
    <ElseIf "%{REQUEST_METHOD} =~ m#^(GET|HEAD|OPTIONS)$# && %{REQUEST_URI} =~ m#^/metrics$#">
        # Metrics endpoint should be handled in another branch
    </ElseIf>
    <Else>
        AuthType Basic
        AuthName Protected
        AuthBasicProvider file
        Require valid-user
        <If "%{REQUEST_METHOD} =~ m#^(GET|HEAD|OPTIONS)$#">
            # Allow readonly requests to viewers
            AuthUserFile /homelab/users/users-viewers.htpasswd
        </If>
        <ElseIf "%{REQUEST_URI} =~ m#^/\.apache(?:/.*)?$#">
            # Deny non-readonly requests for eveybody to internal locations
            AuthUserFile /homelab/users/empty.htpasswd
        </ElseIf>
        <Else>
            # Allow everything for admins
            AuthUserFile /homelab/users/users-admins.htpasswd
        </Else>
    </Else>
</If>

# Custom prometheus metrics for apache itself
RewriteCond %{REQUEST_URI} ^/\.apache/metrics$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteRule ^ "%{ENV:PROXY_PROMETHEUS_EXPORTER_URL}/metrics" [P,L]

# Custom prometheus metrics
RewriteCond %{ENV:HOMELAB_APP_TYPE} ^(?:dawarich|glances|pihole|samba|unbound)$ [NC]
RewriteCond %{REQUEST_URI} ^/metrics$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteRule ^ "%{ENV:PROXY_UPSTREAM_URL_PROMETHEUS}%{REQUEST_URI}" [P,L]

# Custom prometheus metrics for docker-stats
RewriteCond %{ENV:HOMELAB_APP_TYPE} ^(?:docker-stats)$ [NC]
RewriteCond %{REQUEST_URI} ^/metrics$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteRule ^ "%{ENV:PROXY_UPSTREAM_URL}/" [P,L]

# Custom owntracks/dawarich decryptor
RewriteCond %{ENV:HOMELAB_APP_TYPE} ^owntracks$ [NC]
RewriteCond %{REQUEST_METHOD} POST [NC]
RewriteCond %{REQUEST_URI} ^/pub [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteRule ^ "http://decryptor:8080%{REQUEST_URI}" [P,L]
# RewriteCond %{ENV:HOMELAB_APP_TYPE} ^dawarich$ [NC]
# RewriteCond %{REQUEST_METHOD} POST [NC]
# RewriteCond %{REQUEST_URI} ^/api/v1/owntracks/points [NC]
# RewriteCond %{HTTP:Upgrade} !websocket [NC]
# RewriteCond %{HTTP:Connection} !upgrade [NC]
# RewriteRule ^ "http://decryptor:8080%{REQUEST_URI}" [P,L]

# Custom groceries backend
RewriteCond %{ENV:HOMELAB_APP_TYPE} ^groceries$ [NC]
RewriteCond %{REQUEST_URI} ^/api/(.*)$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteRule ^ "http://app-backend:3333/%1" [P,L]
RewriteCond %{ENV:HOMELAB_APP_TYPE} ^groceries$ [NC]
RewriteCond %{REQUEST_URI} ^/couchdb/(.*)$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteRule ^ "http://couchdb:5984/%1" [P,L]

# Custom favicons
RewriteCond %{REQUEST_URI} ^/favicon\.(?:ico|png)$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteRule ^ "http://favicons:8080%{REQUEST_URI}" [P,L]

# Proxy websockets upstream
RewriteCond %{REQUEST_URI} !^/\.apache(?:/.*)?$ [NC]
RewriteCond %{HTTP:Upgrade} websocket [NC]
RewriteCond %{HTTP:Connection} upgrade [NC]
RewriteCond %{ENV:PROXY_UPSTREAM_URL_WS} !^$ [NC]
RewriteRule ^ "%{ENV:PROXY_UPSTREAM_URL_WS}%{REQUEST_URI}" [P,L]

# Proxy motioneye stream requests upstream
RewriteCond %{ENV:HOMELAB_APP_TYPE} motioneye [NC]
RewriteCond %{REQUEST_URI} ^/stream$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteCond %{ENV:PROXY_UPSTREAM_URL_STREAM} !^$ [NC]
RewriteRule ^ "%{ENV:PROXY_UPSTREAM_URL_STREAM}/" [P,L]

# Proxy regular requests upstream
RewriteCond %{REQUEST_URI} !^/\.apache(?:/.*)?$ [NC]
RewriteCond %{HTTP:Upgrade} !websocket [NC]
RewriteCond %{HTTP:Connection} !upgrade [NC]
RewriteCond %{ENV:PROXY_UPSTREAM_URL} !^$ [NC]
RewriteRule ^ "%{ENV:PROXY_UPSTREAM_URL}%{REQUEST_URI}" [P,L]

# Return 404 instead of 403 for not found directory-index
RewriteCond %{REQUEST_URI} !^/\.apache/status$ [NC]
RewriteCond %{REQUEST_URI} !^/\.apache/metrics$ [NC]
RewriteCond %{ENV:_REDIRECT} false [NC]
RewriteCond %{ENV:PROXY_UPSTREAM_URL} ^$ [NC]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ - [L,R=404]
